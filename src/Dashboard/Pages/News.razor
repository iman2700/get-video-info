@page "/News"
@using Application.Common.Models
@using Application.NewsItems.Queries.GetNewsItemsWithPagination
@using Ardalis.GuardClauses
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Dashboard.Services
@using WebApi.Services
@inject IHttpService HttpService
@inject NavigationManager NavigationManager

<PageTitle>News</PageTitle>

<h1>News</h1>

@if (_news == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <button @onclick="() => CreateNews()">New</button>
    </div>
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Source</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var newsItem in _news.Items)
        {
            <tr>
                    <td><a href="@newsItem.Url" target="_blank">@newsItem.Title</a></td>
                <td>@newsItem.Source.ToString()</td>
                <td>
                        <button @onclick="() => DeleteNews(newsItem.Id)">Delete</button>
                        <button @onclick="() => EditNews(newsItem.Id)">Edit</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    <nav>
        <button disabled="@IsFirstPage" @onclick="() => LoadNews(_pageNumber - 1)">Previous</button>

        <select @bind="_selectedPage" @oninput="ChangePage">
            @for (int i = 1; i <= _totalPages; i++)
            {
                <option value="@i">@i</option>
            }
        </select>

        <span>Page @_pageNumber of @_totalPages</span>

        <button disabled="@IsLastPage" @onclick="() => LoadNews(_pageNumber + 1)">Next</button>
    </nav>
}

@code {
    
    const int PageSize = 10;
    PaginatedList<NewsItemPageDto>? _news;
    int _pageNumber = 1;
    int _totalPages;
    int _selectedPage = 1;
    bool IsFirstPage => _pageNumber == 1;
    bool IsLastPage => _pageNumber == _totalPages;

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    protected override async Task OnInitializedAsync()
    {
        await LoadNews(_pageNumber);
    }

    private async Task LoadNews(int pageNumber)
    {
        string newsString= await HttpService.Get($"api/NewsItems?PageNumber={pageNumber}&PageSize={PageSize}");
        JToken? newsJToken = JsonConvert.DeserializeObject<JToken>(newsString);
        if (newsJToken != null)
        {
            string? itemsString = newsJToken["items"]?.ToString();
            string? totalPagesString = newsJToken["totalPages"]?.ToString();
            string? pageNumberString = newsJToken["pageNumber"]?.ToString();
            Guard.Against.NullOrEmpty(itemsString);
            Guard.Against.NullOrEmpty(totalPagesString);
            Guard.Against.NullOrEmpty(pageNumberString);

            IReadOnlyCollection<NewsItemPageDto>? items = JsonConvert.DeserializeObject<IReadOnlyCollection<NewsItemPageDto>>(itemsString);
            Guard.Against.Null(items);

            _news = new PaginatedList<NewsItemPageDto>(items, int.Parse(totalPagesString) * PageSize, int.Parse(pageNumberString), PageSize);
            _totalPages = _news.TotalPages;
            _pageNumber = pageNumber;
        }
    }

    private async Task DeleteNews(int newsId)
    {
        await HttpService.Delete($"api/NewsItems/{newsId}");
        NavigationManager.NavigateTo("News", true);
    }

    private void EditNews(int newsId)
    {
        NavigationManager.NavigateTo($"News/Edit/{newsId}", true);
    }

    private void CreateNews()
    {
        NavigationManager.NavigateTo($"News/Edit", true);
    }


    private async Task ChangePage(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int selectedPage))
        {
            if (selectedPage >= 1 && selectedPage <= _totalPages)
            {
                await LoadNews(selectedPage);
            }
            else
            { 
                // Handle invalid page number
                Console.WriteLine("Invalid page number");
            }
        }
    }
}