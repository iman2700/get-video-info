@page "/Login"
@using System.ComponentModel.DataAnnotations
@inject IHttpClientFactory ClientFactory;
@inject NavigationManager NavigationManager
@inject Dashboard.Services.ILocalStorageService LocalStorageService


<div class="container text-center">
    <div class="row justify-content-md-center">
        <div class="col col-lg-3 col-sm-6">
            <h3>Login</h3>
            <EditForm Model="_user" OnValidSubmit="OnValid" class="my-centered-div">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-2">
                    <InputText id="username" class="form-control" @bind-Value="_user.Username" placeholder="Enter Username"></InputText>
                </div>
                <div class="mb-2">
                    <InputText id="password" type="password" class="form-control" @bind-Value="_user.Password" placeholder="Enter Password"></InputText>
                </div>
                <div class="mb-2 text-right">
                    <button class="btn btn-secondary">login</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {

    public class LoginModel
    {
        [Required] public string? Username { get; set; }
        [Required] public string? Password { get; set; }
    }

    readonly LoginModel _user = new LoginModel();

    private async Task OnValid()
    {
        string? token = await GetJwtToken();
        if (token != null)
        {
            await LocalStorageService.SetItem("jwtToken", token);
            NavigationManager.NavigateTo("/", true);
        }
    }
    
    private async Task<string?> GetJwtToken()
    {
        var loginData = new { username = _user.Username, password = _user.Password };
        var client = ClientFactory.CreateClient("LocalApi");
        var response = await client.PostAsJsonAsync("api/Users/login", loginData);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            client.Dispose();
            return token;
        }
        return null;
    }
}
