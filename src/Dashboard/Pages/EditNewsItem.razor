@page "/News/Edit/{id?}"
@using Application.NewsItems.Commands.CreateNewsItem
@using Dashboard.Services
@using Domain.Entities
@using Domain.Enums
@using System.Net.Http.Headers
@using Application.NewsItems.Commands.UpdateNewsItem
@using Application.NewsItems.Queries.GetNewsItemsWithPagination
@using AutoMapper
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using WebApi.Services
@inject IHttpService HttpService
@inject ILocalStorageService LocalStorageService
@inject IMapper Mapper
@inject NavigationManager NavigationManager

<h3>News</h3>
<EditForm Model="NewsItem" OnValidSubmit="OnValid" class="my-centered-div">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-2">
        <label class="col-2 font-weight-bold">Title: </label>
        <InputText class="form-control" @bind-Value="NewsItem.Title" required />
    </div>
    <div class="mb-2">
        <label class="col-2 font-weight-bold">Url: </label>
        <InputText class="form-control" @bind-Value="NewsItem.Url" required />
    </div>
    <div class="mb-2">
        <label class="col-2 font-weight-bold">Thumbnail: </label>
        <InputText class="form-control" @bind-Value="NewsItem.Thumbnail" />
    </div>
    <div class="mb-2">
        <label class="col-2 font-weight-bold">Content: </label>
        <InputText class="form-control" @bind-Value="NewsItem.NewsContent" />
    </div>
    <div class="mb-2">
        <label class="col-2 font-weight-bold">Source: </label>
        <select @bind="NewsItem!.Source" required>
            @if (Platforms != null)
            {
                foreach (var platform in Platforms)
                {
                    <option value="@platform">@platform</option>
                }
            }
        </select>
    </div>
    <div class="mb-2">
        <label class="col-2 font-weight-bold">Tags: </label>
        <ul>
            @foreach (var tag in Tags)
            {
                <li>
                    @if (NewsItem.TagIds != null && NewsItem.TagIds.Contains(tag.Id))
                    {
                        <input type="checkbox"
                               name="SelectedSkills"
                               value="@tag.Id"
                               id="@tag.Id"
                               @oninput="(e) => CheckTag(e, tag.Id)"
                               checked="checked"/>          
                    }
                    else
                    {
                        <input type="checkbox"
                               name="SelectedSkills"
                               value="@tag.Id"
                               id="@tag.Id"
                               @oninput="(e) => CheckTag(e, tag.Id)"/>
                    }
                    <label for="@tag.Id">@tag.Name</label>
                </li>
            }
        </ul>
    </div>
    <div class="mb-2 text-right">
        <button class="btn btn-secondary">Save</button>
    </div>
</EditForm>

@code {
    public record EditNewsItemDto
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string? NewsContent { get; set; }
        public string? Thumbnail { get; set; }
        public List<int>? CategoryItemIds { get; set; }
        public Platform Source { get; set; }
        public string Url { get; set; }
        public bool IsPublished { get; set; }
        public List<int>? TagIds { get; set; }
    }

    [Parameter]
    public string? Id { get; set; }

    EditNewsItemDto? NewsItem { get; set; }
    List<Tag>? Tags { get; set; }
    List<Platform>? Platforms { get; set; }

    readonly List<Tag> _selectedTags = new List<Tag>();

    protected override async Task OnInitializedAsync()
    {
        Tags = new List<Tag>();
        Platforms = Enum.GetValues(typeof(Platform)).Cast<Platform>().ToList();
        NewsItem = new EditNewsItemDto();

        string tagsString= await HttpService.Get($"api/Tags");
        Tags = JsonConvert.DeserializeObject<List<Tag>>(tagsString);

        if (!string.IsNullOrEmpty(Id))
        {
            string newsString= await HttpService.Get($"api/NewsItems/{Id}");
            NewsItemPageDto fetchedNewsItem = JsonConvert.DeserializeObject<NewsItemPageDto>(newsString);
            NewsItem.Id = fetchedNewsItem.Id;
            NewsItem.Title = fetchedNewsItem.Title;
            NewsItem.NewsContent = fetchedNewsItem.NewsContent;
            NewsItem.Thumbnail = fetchedNewsItem.Thumbnail;
            NewsItem.Source = fetchedNewsItem.Source;
            NewsItem.Url = fetchedNewsItem.Url;
            NewsItem.IsPublished = fetchedNewsItem.IsPublished;
            if (fetchedNewsItem.CategoryItems != null && fetchedNewsItem.CategoryItems.Count > 0)
            {
                NewsItem.CategoryItemIds = new List<int>();
                foreach (var categoryItemBriefDto in fetchedNewsItem.CategoryItems)
                    NewsItem.CategoryItemIds.Add(categoryItemBriefDto.Id);
            }
            if (fetchedNewsItem.Tags != null && fetchedNewsItem.Tags.Count > 0)
            {
                NewsItem.TagIds = new List<int>();
                foreach (var tag in fetchedNewsItem.Tags)
                {
                    NewsItem.TagIds.Add(tag.Id);
                    _selectedTags.Add(tag);
                }
            }
        }
    }

    private void CheckTag(ChangeEventArgs e,int tagId)
    {
        if (e.Value != null && (bool)e.Value)
        {
            Tag? selectedTag = Tags?.Find(t => t.Id == tagId);
            if (selectedTag != null && !_selectedTags.Exists(t => t.Id == selectedTag.Id))
                _selectedTags.Add(selectedTag);
        }
        else
        {
            Tag? selectedTag = _selectedTags.Find(t => t.Id == tagId);
            if (selectedTag != null)
                _selectedTags.Remove(selectedTag);
        }
    }

    private async Task OnValid()
    {
        if (_selectedTags.Count > 0)
        {
            NewsItem.TagIds = new List<int>();
            NewsItem.TagIds.AddRange(_selectedTags.Select(t => t.Id));
        }
        else
        {
            NewsItem.TagIds = null;
        }
        string returnId = "";
        if (NewsItem.Id == 0)
        {
            CreateNewsItemCommand createNewsItemCommand = Mapper.Map<EditNewsItemDto, CreateNewsItemCommand>(NewsItem);
            returnId = await HttpService.Post("api/NewsItems", createNewsItemCommand);
            NavigationManager.NavigateTo("/News", true);
        }
        else
        {
            UpdateNewsItemCommand updateNewsItemCommand = Mapper.Map<EditNewsItemDto, UpdateNewsItemCommand>(NewsItem);
            returnId = await HttpService.Put($"api/NewsItems/{updateNewsItemCommand.Id}", updateNewsItemCommand);
            NavigationManager.NavigateTo("/News", true);
        }
    }

}
